# This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.

# Non-default backend definition. Port set to instance's http-address.

backend instance1 {
    .host = "localhost";
    .port = "8010";
    .probe = {
            .url = "/";
            .interval = 5s;
            .timeout = 1 s;
            .window = 5;
            .threshold = 3;
    }
}

backend instance2 {
    .host = "localhost";
    .port = "8020";
    .probe = {
            .url = "/";
            .interval = 5s;
            .timeout = 1 s;
            .window = 5;
            .threshold = 3;
    }
}

backend sorryserver {
    .host = "localhost";
    .port = "80";
}

director defaultbalancer round-robin{
    {
        .backend = instance1;
    }
    {
        .backend = instance2;
    }
}

acl purge {
    "localhost";
}

sub vcl_recv {
    set req.grace = 120s;
    set req.backend = defaultbalancer;
    
    if (! req.backend.healthy)  {
        set req.backend = sorryserver;
        return(pass);
    }

    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
                error 405 "Not allowed.";
        }
        purge_url(req.url);
        error 200 "Purged";
    }
    if (req.request != "GET" && req.request != "HEAD") {
        # We only deal with GET and HEAD by default
        return(pass);
    }
    call normalize_accept_encoding;
    call annotate_request;
    return(lookup);
}

sub vcl_fetch {
    if (beresp.status == 302) {
        # require_login should not be cached
        set beresp.http.X-Varnish-Action = "FETCH (pass - redirect)";
        return(pass);
    }
    if (!beresp.cacheable) {
        set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";
        call save_cache_control_header;
        return(pass);
    }
    if (beresp.http.Set-Cookie) {
        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets cookie)";
        return(pass);
    }
    if (!beresp.http.Cache-Control ~ "s-maxage=[1-9]" && beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets private/no-cache/no-store token)";
        return(pass);
    }
    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";
        return(pass);
    }
    if (req.http.X-Anonymous && !beresp.http.Cache-Control) {
        set beresp.ttl = 600s;
        set beresp.http.X-Varnish-Action = "FETCH (override - backend not setting cache control)";
    }
    call rewrite_s_maxage;
    return(deliver);
}

sub vcl_deliver {
    call restore_cache_control_header;
    call rewrite_age;
}


# Optimize the Accept-Encoding variant caching
sub normalize_accept_encoding {
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpe?g|png|gif|swf|pdf|gz|tgz|bz2|tbz|zip|mp3|ogg|mp4|flv)$" || req.url ~ "/image_[^/]*$") {
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } else {
            remove req.http.Accept-Encoding;
        }
    }
}

# Keep auth/anon variants apart if "Vary: X-Anonymous" is in the response
sub annotate_request {
    if (!(req.http.Authorization || req.http.cookie ~ "(^|.*; )__ac=")) {
        set req.http.X-Anonymous = "True";
    }
}

# The varnish response should always declare itself to be fresh
sub rewrite_age {
    if (resp.http.Age) {
        set resp.http.X-Varnish-Age = resp.http.Age;
        set resp.http.Age = "0";
    }
}

# Rewrite s-maxage to exclude from intermediary proxies
# (to cache *everywhere*, just use 'max-age' token in the response to avoid this override)
sub rewrite_s_maxage {
    if (beresp.http.Cache-Control ~ "s-maxage") {
        set beresp.http.Cache-Control = regsub(beresp.http.Cache-Control, "s-maxage=[0-9]+", "s-maxage=0");
    }
}

# Save the Cache-Control header
sub save_cache_control_header {
    set beresp.http.X-Propagate-Cache-Control = beresp.http.Cache-Control;
}

# Restore the Cache-Control header
sub restore_cache_control_header {
    if (resp.http.X-Propagate-Cache-Control) {
        set resp.http.Cache-Control = resp.http.X-Propagate-Cache-Control;
        unset resp.http.X-Propagate-Cache-Control;
    }
}

